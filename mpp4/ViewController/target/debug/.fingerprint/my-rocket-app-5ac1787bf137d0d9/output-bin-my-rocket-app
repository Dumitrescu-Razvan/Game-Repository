{"$message_type":"diagnostic","message":"unused import: `Faker`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/repo.rs","byte_start":85,"byte_end":90,"line_start":4,"line_end":4,"column_start":18,"column_end":23,"is_primary":true,"text":[{"text":"use fake::{Fake, Faker};","highlight_start":18,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/repo.rs","byte_start":83,"byte_end":90,"line_start":4,"line_end":4,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"use fake::{Fake, Faker};","highlight_start":16,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Faker`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/repo.rs:4:18\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse fake::{Fake, Faker};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `gen_range` exists for fn item `fn() -> ThreadRng {thread_rng}`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/repo.rs","byte_start":3380,"byte_end":3389,"line_start":109,"line_end":109,"column_start":55,"column_end":64,"is_primary":true,"text":[{"text":"        let words: Vec<String> = (0..rand::thread_rng.gen_range(2..4)).map(|_| Words.fake()).collect();","highlight_start":55,"highlight_end":64}],"label":"method cannot be called on `fn() -> ThreadRng {thread_rng}` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`fn() -> ThreadRng {thread_rng}: RngCore`\nwhich is required by `fn() -> ThreadRng {thread_rng}: Rng`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use parentheses to call this function","code":null,"level":"help","spans":[{"file_name":"src/repo.rs","byte_start":3379,"byte_end":3379,"line_start":109,"line_end":109,"column_start":54,"column_end":54,"is_primary":true,"text":[{"text":"        let words: Vec<String> = (0..rand::thread_rng.gen_range(2..4)).map(|_| Words.fake()).collect();","highlight_start":54,"highlight_end":54}],"label":null,"suggested_replacement":"()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `gen_range` exists for fn item `fn() -> ThreadRng {thread_rng}`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/repo.rs:109:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let words: Vec<String> = (0..rand::thread_rng.gen_range(2..4)).map(|_| Words.fake()).collect();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `fn() -> ThreadRng {thread_rng}` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `fn() -> ThreadRng {thread_rng}: RngCore`\u001b[0m\n\u001b[0m            which is required by `fn() -> ThreadRng {thread_rng}: Rng`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use parentheses to call this function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let words: Vec<String> = (0..rand::thread_rng\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m.gen_range(2..4)).map(|_| Words.fake()).collect();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Dummy<fn(std::ops::Range<usize>) -> Words<EN> {fake::faker::lorem::en::Words}>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/repo.rs","byte_start":3411,"byte_end":3415,"line_start":109,"line_end":109,"column_start":86,"column_end":90,"is_primary":true,"text":[{"text":"        let words: Vec<String> = (0..rand::thread_rng.gen_range(2..4)).map(|_| Words.fake()).collect();","highlight_start":86,"highlight_end":90}],"label":"the trait `Dummy<fn(std::ops::Range<usize>) -> Words<EN> {fake::faker::lorem::en::Words}>` is not implemented for `std::string::String`, which is required by `fn(std::ops::Range<usize>) -> Words<EN> {fake::faker::lorem::en::Words}: fake::private::FakeBase<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Dummy<T>`:\n  <std::string::String as Dummy<Bic<L>>>\n  <std::string::String as Dummy<Bs<L>>>\n  <std::string::String as Dummy<BsAdj<L>>>\n  <std::string::String as Dummy<BsNoun<L>>>\n  <std::string::String as Dummy<BsVerb<L>>>\n  <std::string::String as Dummy<BuildingNumber<L>>>\n  <std::string::String as Dummy<Buzzword<L>>>\n  <std::string::String as Dummy<BuzzwordMiddle<L>>>\nand 78 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `fn(std::ops::Range<usize>) -> Words<EN> {fake::faker::lorem::en::Words}` to implement `fake::private::FakeBase<std::string::String>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `fake`","code":null,"level":"note","spans":[{"file_name":"/home/dumi/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fake-2.9.2/src/lib.rs","byte_start":6165,"byte_end":6169,"line_start":200,"line_end":200,"column_start":8,"column_end":12,"is_primary":false,"text":[{"text":"    fn fake<U>(&self) -> U","highlight_start":8,"highlight_end":12}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/dumi/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fake-2.9.2/src/lib.rs","byte_start":6209,"byte_end":6229,"line_start":202,"line_end":202,"column_start":15,"column_end":35,"is_primary":true,"text":[{"text":"        Self: private::FakeBase<U>,","highlight_start":15,"highlight_end":35}],"label":"required by this bound in `Fake::fake`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Dummy<fn(std::ops::Range<usize>) -> Words<EN> {fake::faker::lorem::en::Words}>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/repo.rs:109:86\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let words: Vec<String> = (0..rand::thread_rng.gen_range(2..4)).map(|_| Words.fake()).collect();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Dummy<fn(std::ops::Range<usize>) -> Words<EN> {fake::faker::lorem::en::Words}>` is not implemented for `std::string::String`, which is required by `fn(std::ops::Range<usize>) -> Words<EN> {fake::faker::lorem::en::Words}: fake::private::FakeBase<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Dummy<T>`:\u001b[0m\n\u001b[0m              <std::string::String as Dummy<Bic<L>>>\u001b[0m\n\u001b[0m              <std::string::String as Dummy<Bs<L>>>\u001b[0m\n\u001b[0m              <std::string::String as Dummy<BsAdj<L>>>\u001b[0m\n\u001b[0m              <std::string::String as Dummy<BsNoun<L>>>\u001b[0m\n\u001b[0m              <std::string::String as Dummy<BsVerb<L>>>\u001b[0m\n\u001b[0m              <std::string::String as Dummy<BuildingNumber<L>>>\u001b[0m\n\u001b[0m              <std::string::String as Dummy<Buzzword<L>>>\u001b[0m\n\u001b[0m              <std::string::String as Dummy<BuzzwordMiddle<L>>>\u001b[0m\n\u001b[0m            and 78 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `fn(std::ops::Range<usize>) -> Words<EN> {fake::faker::lorem::en::Words}` to implement `fake::private::FakeBase<std::string::String>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `fake`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/dumi/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fake-2.9.2/src/lib.rs:202:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fake<U>(&self) -> U\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: private::FakeBase<U>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Fake::fake`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
